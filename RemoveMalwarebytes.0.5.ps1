<#	
	.NOTES
	===========================================================================
	 Created on:   	20200701
	 Created by:   	jmeyer
	 Organization: 	Helion Technologies
	 Filename:     	RemoveMalwarebytes.VERSION.ps1
	===========================================================================
	.DESCRIPTION
		This will remove the software listed below with no GUI or reboots.

		Malwarebytes (all versions)
#>

Write-Host "Setting up..." -ForegroundColor Yellow

$ScriptVersion = "RemoveMalwarebytes.0.5"

Write-Host "Checking OS version..." -ForegroundColor Yellow
If ((Get-WmiObject Win32_OperatingSystem).Caption -like '*server*')
{
	Write-Warning "This script is not designed to run on a Server OS. The script will now close."
		## Removing all script files for security reasons.
	Write-Warning "Removing script files for security purposes..."
		## Self destructs script.
	Remove-Item -LiteralPath $MyInvocation.MyCommand.Path -Force
	Write-Host "File deletion completed" -ForegroundColor Green
	Write-Warning "Press any key to exit...";
	$x = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown");
}
else
{
	Write-Host "OS Version verified. Continuing..." -ForegroundColor Green
}

Write-Host "Checking for administrative rights..." -ForegroundColor Yellow
	## Get the ID and security principal of the current user account.
$myWindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent();
$myWindowsPrincipal = New-Object System.Security.Principal.WindowsPrincipal($myWindowsID);

	## Get the security principal for the administrator role.
$adminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator;

	## Check to see if we are currently running as an administrator.
if ($myWindowsPrincipal.IsInRole($adminRole))
{
		## We are running as an administrator, so change the title and background colour to indicate this.
	Write-Host "We are running as administrator, changing the title to indicate this." -ForegroundColor Green
	$Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Elevated)";
}
else
{
	Write-Host "We are not running as administrator. Relaunching as administrator." -ForegroundColor Yellow
		## We are not running as admin, so relaunch as admin.
	$NewProcess = New-Object System.Diagnostics.ProcessStartInfo "PowerShell";
		## Specify the current script path and name as a parameter with added scope and support for scripts with spaces in it's path.
	$NewProcess.Arguments = "& '" + $script:MyInvocation.MyCommand.Path + "'"
		## Indicate that the process should be elevated.
	$NewProcess.Verb = "runas";
		## Start the new process
	[System.Diagnostics.Process]::Start($newProcess);
		## Exit from the current, unelevated, process.
	Exit;
}

Write-Host "Continuing with setup..." -ForegroundColor Yellow

	## Start log.
if ($PSVersionTable.PSVersion.Major -ge 3)
{
	Write-Host "We are running Powershell version 3 or greater. Logging enabled." -ForegroundColor Green
	If ((Test-Path C:\Logs\) -eq $false)
	{
		New-Item C:\Logs\ -ItemType Directory
	}
	Start-Transcript -Path "C:\Logs\$ScriptVersion.$(Get-Date -UFormat %Y%m%d).log"
}

$INFO = "
Malwarebytes Removal script written by Josh Meyer.
Please contact the author if you have any questions or concerns.
Contact info: jmeyer@heliontechnologies.com
**For complete ChangeLog, please contact the author.**

Script version: $ScriptVersion
"
	## Variables

	## Functions
function MbAMCheckVariables
{
	$MbAMCheck1 = (Resolve-Path -Path C:\Prog*\Malw*).Path, (Resolve-Path -Path C:\Prog*\Malw*\Ant*).Path
	#$MbAMCheck1 += (Resolve-Path -Path C:\Prog*\Malw*\Ant*).Path
	## if Statement required due to Join-Path erroring if $MvAMCheck1 is $null. ErrorAction did not suppress error.
	if (($MbAMCheck1) -ne $null)
	{
		$MbAMCheck2 = Test-Path -Path (Join-Path -Path $MbAMCheck1 -ChildPath unins000.exe)
		$MbAMCheck2 += Test-Path -Path (Join-Path -Path $MbAMCheck1 -ChildPath mbuns.exe)
		$MbAMSoftware = Join-Path -Path $MbAMCheck1 -ChildPath unins000.exe
		$MbAMSoftware += Join-Path -Path $MbAMCheck1 -ChildPath mbuns.exe
	}
}
## Running function for MbAM Variables
MbAMCheckVariables

function ScriptEnding ()
{
	## Removing all script files for security reasons.
	Write-Warning "Removing script files for security purposes..."
	## Self destructs script.
	Remove-Item -LiteralPath $PSCommandPath -Force
	Remove-Item -Path "C:\Temp\mbstcmd.exe" -Force
	Write-Host "File deletion completed" -ForegroundColor Green
	
	## Stops Log.
	if ($PSVersionTable.PSVersion.Major -ge 3)
	{
		Write-Warning "Stopping log.."
		Stop-Transcript
	}
}

Write-Host "Setup completed!" -ForegroundColor Green

Write-Host "Checking for all installations of Malwarebytes..." -ForegroundColor Yellow
## Official Malwarebytes command line uninstaller
if (($MbAMCheck2) -contains $true)
{
	Write-Host "Found Malwarebytes software..." -ForegroundColor Green
	Write-Host "Checking for Official Malwarebytes Uninstaller..." -ForegroundColor Yellow
	if ((Test-Path -Path C:\Temp\mbstcmd.exe) -eq $true)
	{
		Write-Host "Found Official Command line Malwarebytes Uninstaller." -ForegroundColor Green
		Write-Host "Running Command line Malwarebytes Uninstaller Silently..." -ForegroundColor Yellow
		Start-Process -FilePath C:\Temp\mbstcmd.exe -ArgumentList "/y", "/cleanup", "/noreboot" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
		MbAMCheckVariables
	}
	else
	{
		Write-Host "Uninstaller not found! Manually checking for other installations..." -ForegroundColor Yellow
	}
	
	Write-Host "Checking for any other installations..." -ForegroundColor Yellow
	if ($MbAMSoftware -ne $null)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "$MbAMSoftware" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	else
	{
		Write-Host "No Malwarebytes software found..." -ForegroundColor Green
	}
	
<#
	## Checking for all installations of Malwarebytes. Installations have changed paths over version changes. Removing if found.
	if ((Test-Path -Path "C:\Program Files\Malwarebytes' Anti-Malware\unins000.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files\Malwarebytes' Anti-Malware\unins000.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Test-Path -Path "C:\Program Files (x86)\Malwarebytes' Anti-Malware\unins000.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files (x86)\Malwarebytes' Anti-Malware\unins000.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Test-Path -Path "C:\Program Files\Malwarebytes Anti-Malware\unins000.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files\Malwarebytes Anti-Malware\unins000.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Test-Path -Path "C:\Program Files (x86)\Malwarebytes Anti-Malware\unins000.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files (x86)\Malwarebytes Anti-Malware\unins000.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Test-Path -Path "C:\Program Files\Malwarebytes\Anti-Malware\unins000.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files\Malwarebytes\Anti-Malware\unins000.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Test-Path -Path "C:\Program Files (x86)\Malwarebytes\Anti-Malware\unins000.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files (x86)\Malwarebytes\Anti-Malware\unins000.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Test-Path -Path "C:\Program Files (x86)\Malwarebytes\Anti-Malware\mbuns.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files (x86)\Malwarebytes\Anti-Malware\mbuns.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Test-Path -Path "C:\Program Files\Malwarebytes\Anti-Malware\mbuns.exe") -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Start-Process -FilePath "C:\Program Files\Malwarebytes\Anti-Malware\mbuns.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
		Write-Host "Removed Malwarebytes." -ForegroundColor Green
	}
	
	if ((Get-Package -Name Malwarebytes*) -eq $true)
	{
		Write-Host "Found Malwarebytes..." -ForegroundColor Green
		Write-Host "Removing Malwarebytes..." -ForegroundColor Yellow
		Get-Package -Name Malwarebytes* | Uninstall-Package -AllVersions -Force
	}
#>
	Write-Host "Malwarebytes removal completed." -ForegroundColor Green
}
else
{
	Write-Host "No Malwarebytes software found." -ForegroundColor Yellow
	Write-Host "Continuing..." -ForegroundColor Green
}

ScriptEnding